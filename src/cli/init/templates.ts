// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2023-Present The Pepr Authors

import { devDependencies, version } from "../../../package.json";
import { inspect } from "util";
import { v4 as uuidv4, v5 as uuidv5 } from "uuid";
import { sanitizeName } from "./utils";
import { InitOptions } from "./walkthrough";

export function genPeprTS() {
  return {
    path: "pepr.ts",
    data: `
import { PeprModule } from "pepr";
import cfg from "./package.json";

// This initializes the Pepr module with the configuration from package.json
export const { Register, ProcessRequest } = new PeprModule(cfg, {
  // Modify as needed
  alwaysIgnore: {
    namespaces: [],
    labels: [],
  },
});

/**
 * Each Pepr Capability is registered with the module using the Register function.
 * This will be automatically generated by the Pepr CLI when creating a new capability:
 * 'pepr new <capability name>'
 *
 * Example:
 * import {Capability1} from "./capabilities/capability1";
 * import {Capability2} from "./capabilities/capability2";
 *
 * Capability1(Register);
 * Capability2(Register);
 */
  
`,
  };
}

export function genPkgJSON(opts: InitOptions) {
  // Generate a random UUID for the module based on the module name
  const uuid = uuidv5(opts.name, uuidv4());
  // Generate a name for the module based on the module name
  const name = sanitizeName(opts.name);
  // Get the  devDependencies from the package.json we need to add to the new module
  const { prettier, typescript } = devDependencies;

  const data = {
    name,
    version: "0.0.1",
    description: opts.description,
    keywords: ["pepr", "k8s", "policy-engine", "pepr-module", "security"],
    pepr: {
      name: opts.name.trim(),
      version,
      uuid,
      onError: opts.errorBehavior,
    },
    scripts: {
      build: "pepr build",
      start: "pepr test",
    },
    dependencies: {
      pepr: `^${version}`,
      prettier,
      typescript,
    },
  };

  return {
    data,
    path: "package.json",
    print: inspect(data, false, 5, true),
  };
}

export const tsConfig = {
  path: "tsconfig.json",
  data: {
    compilerOptions: {
      esModuleInterop: true,
      lib: ["ES2020"],
      moduleResolution: "node",
      resolveJsonModule: true,
      strict: false,
      target: "ES2020",
    },
  },
};

export const gitIgnore = {
  path: ".gitignore",
  data: `# Ignore node_modules
  node_modules
  dist
      `,
};

export const prettierRC = {
  path: ".prettierrc",
  data: {
    arrowParens: "avoid",
    bracketSameLine: false,
    bracketSpacing: true,
    embeddedLanguageFormatting: "auto",
    insertPragma: false,
    printWidth: 80,
    quoteProps: "as-needed",
    requirePragma: false,
    semi: true,
    useTabs: false,
    vueIndentScriptAndStyle: false,
    tabWidth: 2,
  },
};

export const readme = {
  path: "README.md",
  data: `# Pepr Module
  
  This is a Pepr module. It is a module that can be used with the [Pepr]() framework.
  `,
};
